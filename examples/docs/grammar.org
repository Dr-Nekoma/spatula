#+TITLE: Design of Silverware+'s Grammar

* Meta-Language

  -  +  => One or more
  -  *  => Zero or more
  -  ?  => Zero or one 
  -  |  => Or logical operator
  -  _  => And logical operator
  -  =  => Mapping
  - [ ] => Grouping
  - "x" => String literal 
    
* Grammar

** Basic Units
  - Boolean = "T" | "F"
  - Left-Delimiter = "["
  - Right-Delimiter =  "]"
  - Identifier = String
  - Type-Left-Delimiter = "("
  - Type-Right-Delimiter = ")"  
  - Type-Atom = "Integer" | "Bool" | "Rational" | "Unit"
  - WhiteSpace = " " | "\n" | "\t" | "\r\t" | "\r\n" | "\c"
  - Operator = "+" | "-" | "*" | "/"

** General

  - File = WhiteSpace* [Declaration WhiteSpace*]* EOF
  - Declaration = Expression | Type-Declaration | Value-Declaration | Function-Declaration

** Type-Declaration

  - Type-Declaration = ADT | Records

** Expression

  - Expression =  Literal | Universal-Application | Universal-Abstraction | Variable | Condition
  - Literal = Integer | Boolean
  - Universal-Application = Application (Expression | "<" WhiteSpace* Type WhiteSpace* ">")
  - Universal-Abstraction = Abstraction (Parameters (Type | Kind))
  - Variable = Identifier
  - Condition = Enclosed-Expression ("if" WhiteSpace+ Expression WhiteSpace+ Expression WhiteSpace+ Expression)
  - Operation = Enclosed-Expression (Operator WhiteSpace* Expression+)

** Type

  - Type = Type-Atom | Type-Arrow | Type-Variable | Type-Forall | Type-Abstraction | Type-Application
  - Type-Arrow = ArrowList Type
  - Type-Variable = '!' Identifier
  - Type-Forall = Enclosed-Type ("forall" WhiteSpace+ Type-Variable WhiteSpace* "." WhiteSpace* Kind WhiteSpace* ";" WhiteSpace* Type)

** Encloses

  - Enclosed-Expression a = Left-Delimiter WhiteSpace* a WhiteSpace* Right-Delimiter 
  - Enclosed-Parameter a = Type-Left-Delimiter WhiteSpace* a WhiteSpace* Type-Right-Delimiter 
  - Application a = Enclosed-Expression (Expression [WhiteSpace+ a]*)
  - Abstraction a = Enclosed-Expression ("lambda" WhiteSpace+ a [WhiteSpace+ Expression]+)
  - Parameters a = Enclosed-Expression ([(Parameter a) WhiteSpace*]+)
  - Parameter a = Enclosed-Parameter (Identifier WhiteSpace+ a)
  - ArrowList a = Type-Left-Delimiter WhiteSpace* "->" WhiteSpace* (List a) WhiteSpaces* a WhiteSpace* Type-Right-Delimiter
  - List a = Type-Left-Delimiter [WhiteSpace* a]+ WhiteSpace* Type-Right-Delimiter

** Kinds

  - Kind = Kind-Star | Kind-ArrowStar
  - Kind-Star = "*"
  - Kind-ArrowStar = ArrowList Kind

* Aliases

#+begin_src lisp
[deftype Abc {|A : Integer|}]
[defalias Abc Integer]
#+end_src

* ADT

#+begin_src lisp
[defalgebraic Abc('T)
  (A Integer Integer)
  (B 'T)
  (C)]
#+end_src

* Value Declarations

#+begin_src lisp
[define x 123]
[my x 123]
#+end_src

* Function Declarations

#+begin_src lisp
[defun f [(a Integer)
          (b Number)]
  [+ a b]]
#+end_src

* Records

#+begin_src lisp
[defrecord Name('T 'U) 
  (A Integer)
  (B 'T)
  (C)]
#+end_src